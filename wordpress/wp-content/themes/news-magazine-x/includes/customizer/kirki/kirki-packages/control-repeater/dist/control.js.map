{"mappings":"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","sources":["<anon>","src/control.js"],"sourcesContent":["(function () {\n\n/* global kirkiControlLoader */ /* eslint max-depth: 0 */ /* eslint no-useless-escape: 0 */ var $1abc80d3e2df1201$var$RepeaterRow = function(rowIndex, container, label, control) {\n    var self = this;\n    this.rowIndex = rowIndex;\n    this.container = container;\n    this.label = label;\n    this.header = this.container.find(\".repeater-row-header\");\n    this.header.on(\"click\", function() {\n        self.toggleMinimize();\n    });\n    this.container.on(\"click\", \".repeater-row-remove\", function() {\n        self.remove();\n    });\n    this.header.on(\"mousedown\", function() {\n        self.container.trigger(\"row:start-dragging\");\n    });\n    this.container.on(\"keyup change\", \"input, select, textarea\", function(e) {\n        self.container.trigger(\"row:update\", [\n            self.rowIndex,\n            jQuery(e.target).data(\"field\"),\n            e.target\n        ]);\n    });\n    this.setRowIndex = function(rowNum) {\n        this.rowIndex = rowNum;\n        this.container.attr(\"data-row\", rowNum);\n        this.container.data(\"row\", rowNum);\n        this.updateLabel();\n    };\n    this.toggleMinimize = function() {\n        // Store the previous state.\n        this.container.toggleClass(\"minimized\");\n        this.header.find(\".dashicons\").toggleClass(\"dashicons-arrow-up\").toggleClass(\"dashicons-arrow-down\");\n    };\n    this.remove = function() {\n        this.container.slideUp(300, function() {\n            jQuery(this).detach();\n        });\n        this.container.trigger(\"row:remove\", [\n            this.rowIndex\n        ]);\n    };\n    this.updateLabel = function() {\n        var rowLabelField, rowLabel, rowLabelSelector;\n        if (\"field\" === this.label.type) {\n            rowLabelField = this.container.find('.repeater-field [data-field=\"' + this.label.field + '\"]');\n            if (_.isFunction(rowLabelField.val)) {\n                rowLabel = rowLabelField.val();\n                if (\"\" !== rowLabel) {\n                    if (!_.isUndefined(control.params.fields[this.label.field])) {\n                        if (!_.isUndefined(control.params.fields[this.label.field].type)) {\n                            if (\"select\" === control.params.fields[this.label.field].type) {\n                                if (!_.isUndefined(control.params.fields[this.label.field].choices) && !_.isUndefined(control.params.fields[this.label.field].choices[rowLabelField.val()])) rowLabel = control.params.fields[this.label.field].choices[rowLabelField.val()];\n                            } else if (\"radio\" === control.params.fields[this.label.field].type || \"radio-image\" === control.params.fields[this.label.field].type) {\n                                rowLabelSelector = control.selector + ' [data-row=\"' + this.rowIndex + '\"] .repeater-field [data-field=\"' + this.label.field + '\"]:checked';\n                                rowLabel = jQuery(rowLabelSelector).val();\n                            }\n                        }\n                    }\n                    this.header.find(\".repeater-row-label\").text(rowLabel);\n                    return;\n                }\n            }\n        }\n        this.header.find(\".repeater-row-label\").text(this.label.value + \" \" + (this.rowIndex + 1));\n    };\n    this.updateLabel();\n};\nwp.customize.controlConstructor.repeater = wp.customize.Control.extend({\n    // When we're finished loading continue processing\n    ready: function() {\n        var control = this;\n        // Init the control.\n        if (!_.isUndefined(window.kirkiControlLoader) && _.isFunction(kirkiControlLoader)) kirkiControlLoader(control);\n        else control.initKirkiControl();\n    },\n    initKirkiControl: function(control) {\n        var limit, theNewRow, settingValue;\n        control = control || this;\n        // The current value set in Control Class (set in Kirki_Customize_Repeater_Control::to_json() function)\n        settingValue = control.params.value;\n        // The hidden field that keeps the data saved (though we never update it)\n        control.settingField = control.container.find(\"[data-customize-setting-link]\").first();\n        // Set the field value for the first time, we'll fill it up later\n        // control.setValue([], false);\n        // The DIV that holds all the rows\n        control.repeaterFieldsContainer = control.container.find(\".repeater-fields\").first();\n        // Set number of rows to 0\n        control.currentIndex = 0;\n        // Save the rows objects\n        control.rows = [];\n        // Default limit choice\n        limit = false;\n        if (!_.isUndefined(control.params.choices.limit)) limit = 0 >= control.params.choices.limit ? false : parseInt(control.params.choices.limit, 10);\n        control.container.on(\"click\", \"button.repeater-add\", function(e) {\n            e.preventDefault();\n            if (!limit || control.currentIndex < limit) {\n                theNewRow = control.addRow();\n                theNewRow.toggleMinimize();\n                control.initColorPicker();\n                control.initSelect(theNewRow);\n            } else jQuery(control.selector + \" .limit\").addClass(\"highlight\");\n        });\n        control.container.on(\"click\", \".repeater-row-remove\", function() {\n            control.currentIndex--;\n            if (!limit || control.currentIndex < limit) jQuery(control.selector + \" .limit\").removeClass(\"highlight\");\n        });\n        control.container.on(\"click keypress\", \".repeater-field-image .upload-button,.repeater-field-cropped_image .upload-button,.repeater-field-upload .upload-button\", function(e) {\n            e.preventDefault();\n            control.$thisButton = jQuery(this);\n            control.openFrame(e);\n        });\n        control.container.on(\"click keypress\", \".repeater-field-image .remove-button,.repeater-field-cropped_image .remove-button\", function(e) {\n            e.preventDefault();\n            control.$thisButton = jQuery(this);\n            control.removeImage(e);\n        });\n        control.container.on(\"click keypress\", \".repeater-field-upload .remove-button\", function(e) {\n            e.preventDefault();\n            control.$thisButton = jQuery(this);\n            control.removeFile(e);\n        });\n        /**\n     * Function that loads the Mustache template\n     */ control.repeaterTemplate = _.memoize(function() {\n            var compiled, /*\n         * Underscore's default ERB-style templates are incompatible with PHP\n         * when asp_tags is enabled, so WordPress uses Mustache-inspired templating syntax.\n         *\n         * @see trac ticket #22344.\n         */ options = {\n                evaluate: /<#([\\s\\S]+?)#>/g,\n                interpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n                escape: /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n                variable: \"data\"\n            };\n            return function(data) {\n                compiled = _.template(control.container.find(\".customize-control-repeater-content\").first().html(), null, options);\n                return compiled(data);\n            };\n        });\n        // When we load the control, the fields have not been filled up\n        // This is the first time that we create all the rows\n        if (settingValue.length) _.each(settingValue, function(subValue) {\n            theNewRow = control.addRow(subValue);\n            control.initColorPicker();\n            control.initSelect(theNewRow, subValue);\n        });\n        control.repeaterFieldsContainer.sortable({\n            handle: \".repeater-row-header\",\n            update: function() {\n                control.sort();\n            }\n        });\n    },\n    /**\n   * Open the media modal.\n   *\n   * @param {Object} event - The JS event.\n   * @returns {void}\n   */ openFrame: function(event) {\n        if (wp.customize.utils.isKeydownButNotEnterEvent(event)) return;\n        if (this.$thisButton.closest(\".repeater-field\").hasClass(\"repeater-field-cropped_image\")) this.initCropperFrame();\n        else this.initFrame();\n        this.frame.open();\n    },\n    initFrame: function() {\n        var libMediaType = this.getMimeType();\n        this.frame = wp.media({\n            states: [\n                new wp.media.controller.Library({\n                    library: wp.media.query({\n                        type: libMediaType\n                    }),\n                    multiple: false,\n                    date: false\n                })\n            ]\n        });\n        // When a file is selected, run a callback.\n        this.frame.on(\"select\", this.onSelect, this);\n    },\n    /**\n   * Create a media modal select frame, and store it so the instance can be reused when needed.\n   * This is mostly a copy/paste of Core api.CroppedImageControl in /wp-admin/js/customize-control.js\n   *\n   * @returns {void}\n   */ initCropperFrame: function() {\n        // We get the field id from which this was called\n        var currentFieldId = this.$thisButton.siblings(\"input.hidden-field\").attr(\"data-field\"), attrs = [\n            \"width\",\n            \"height\",\n            \"flex_width\",\n            \"flex_height\"\n        ], libMediaType = this.getMimeType();\n        // Make sure we got it\n        if (_.isString(currentFieldId) && \"\" !== currentFieldId) // Make fields is defined and only do the hack for cropped_image\n        {\n            if (_.isObject(this.params.fields[currentFieldId]) && \"cropped_image\" === this.params.fields[currentFieldId].type) //Iterate over the list of attributes\n            attrs.forEach((function(el) {\n                // If the attribute exists in the field\n                if (!_.isUndefined(this.params.fields[currentFieldId][el])) // Set the attribute in the main object\n                this.params[el] = this.params.fields[currentFieldId][el];\n            }).bind(this));\n        }\n        this.frame = wp.media({\n            button: {\n                text: \"Select and Crop\",\n                close: false\n            },\n            states: [\n                new wp.media.controller.Library({\n                    library: wp.media.query({\n                        type: libMediaType\n                    }),\n                    multiple: false,\n                    date: false,\n                    suggestedWidth: this.params.width,\n                    suggestedHeight: this.params.height\n                }),\n                new wp.media.controller.CustomizeImageCropper({\n                    imgSelectOptions: this.calculateImageSelectOptions,\n                    control: this\n                })\n            ]\n        });\n        this.frame.on(\"select\", this.onSelectForCrop, this);\n        this.frame.on(\"cropped\", this.onCropped, this);\n        this.frame.on(\"skippedcrop\", this.onSkippedCrop, this);\n    },\n    onSelect: function() {\n        var attachment = this.frame.state().get(\"selection\").first().toJSON();\n        if (this.$thisButton.closest(\".repeater-field\").hasClass(\"repeater-field-upload\")) this.setFileInRepeaterField(attachment);\n        else this.setImageInRepeaterField(attachment);\n    },\n    /**\n   * After an image is selected in the media modal, switch to the cropper\n   * state if the image isn't the right size.\n   */ onSelectForCrop: function() {\n        var attachment = this.frame.state().get(\"selection\").first().toJSON();\n        if (this.params.width === attachment.width && this.params.height === attachment.height && !this.params.flex_width && !this.params.flex_height) this.setImageInRepeaterField(attachment);\n        else this.frame.setState(\"cropper\");\n    },\n    /**\n   * After the image has been cropped, apply the cropped image data to the setting.\n   *\n   * @param {object} croppedImage Cropped attachment data.\n   * @returns {void}\n   */ onCropped: function(croppedImage) {\n        this.setImageInRepeaterField(croppedImage);\n    },\n    /**\n   * Returns a set of options, computed from the attached image data and\n   * control-specific data, to be fed to the imgAreaSelect plugin in\n   * wp.media.view.Cropper.\n   *\n   * @param {wp.media.model.Attachment} attachment - The attachment from the WP API.\n   * @param {wp.media.controller.Cropper} controller - Media controller.\n   * @returns {Object} - Options.\n   */ calculateImageSelectOptions: function(attachment, controller) {\n        var control = controller.get(\"control\"), flexWidth = !!parseInt(control.params.flex_width, 10), flexHeight = !!parseInt(control.params.flex_height, 10), realWidth = attachment.get(\"width\"), realHeight = attachment.get(\"height\"), xInit = parseInt(control.params.width, 10), yInit = parseInt(control.params.height, 10), ratio = xInit / yInit, xImg = realWidth, yImg = realHeight, x1, y1, imgSelectOptions;\n        controller.set(\"canSkipCrop\", !control.mustBeCropped(flexWidth, flexHeight, xInit, yInit, realWidth, realHeight));\n        if (xImg / yImg > ratio) {\n            yInit = yImg;\n            xInit = yInit * ratio;\n        } else {\n            xInit = xImg;\n            yInit = xInit / ratio;\n        }\n        x1 = (xImg - xInit) / 2;\n        y1 = (yImg - yInit) / 2;\n        imgSelectOptions = {\n            handles: true,\n            keys: true,\n            instance: true,\n            persistent: true,\n            imageWidth: realWidth,\n            imageHeight: realHeight,\n            x1: x1,\n            y1: y1,\n            x2: xInit + x1,\n            y2: yInit + y1\n        };\n        if (false === flexHeight && false === flexWidth) imgSelectOptions.aspectRatio = xInit + \":\" + yInit;\n        if (false === flexHeight) imgSelectOptions.maxHeight = yInit;\n        if (false === flexWidth) imgSelectOptions.maxWidth = xInit;\n        return imgSelectOptions;\n    },\n    /**\n   * Return whether the image must be cropped, based on required dimensions.\n   *\n   * @param {bool} flexW - The flex-width.\n   * @param {bool} flexH - The flex-height.\n   * @param {int}  dstW - Initial point distance in the X axis.\n   * @param {int}  dstH - Initial point distance in the Y axis.\n   * @param {int}  imgW - Width.\n   * @param {int}  imgH - Height.\n   * @returns {bool} - Whether the image must be cropped or not based on required dimensions.\n   */ mustBeCropped: function(flexW, flexH, dstW, dstH, imgW, imgH) {\n        return !(true === flexW && true === flexH || true === flexW && dstH === imgH || true === flexH && dstW === imgW || dstW === imgW && dstH === imgH || imgW <= dstW);\n    },\n    /**\n   * If cropping was skipped, apply the image data directly to the setting.\n   *\n   * @returns {void}\n   */ onSkippedCrop: function() {\n        var attachment = this.frame.state().get(\"selection\").first().toJSON();\n        this.setImageInRepeaterField(attachment);\n    },\n    /**\n   * Updates the setting and re-renders the control UI.\n   *\n   * @param {object} attachment - The attachment object.\n   * @returns {void}\n   */ setImageInRepeaterField: function(attachment) {\n        var $targetDiv = this.$thisButton.closest(\".repeater-field-image,.repeater-field-cropped_image\");\n        $targetDiv.find(\".kirki-image-attachment\").html('<img src=\"' + attachment.url + '\">').hide().slideDown(\"slow\");\n        $targetDiv.find(\".hidden-field\").val(attachment.id);\n        this.$thisButton.text(this.$thisButton.data(\"alt-label\"));\n        $targetDiv.find(\".remove-button\").show();\n        //This will activate the save button\n        $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n        this.frame.close();\n    },\n    /**\n   * Updates the setting and re-renders the control UI.\n   *\n   * @param {object} attachment - The attachment object.\n   * @returns {void}\n   */ setFileInRepeaterField: function(attachment) {\n        var $targetDiv = this.$thisButton.closest(\".repeater-field-upload\");\n        $targetDiv.find(\".kirki-file-attachment\").html('<span class=\"file\"><span class=\"dashicons dashicons-media-default\"></span> ' + attachment.filename + \"</span>\").hide().slideDown(\"slow\");\n        $targetDiv.find(\".hidden-field\").val(attachment.id);\n        this.$thisButton.text(this.$thisButton.data(\"alt-label\"));\n        $targetDiv.find(\".upload-button\").show();\n        $targetDiv.find(\".remove-button\").show();\n        //This will activate the save button\n        $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n        this.frame.close();\n    },\n    getMimeType: function() {\n        // We get the field id from which this was called\n        var currentFieldId = this.$thisButton.siblings(\"input.hidden-field\").attr(\"data-field\");\n        // Make sure we got it\n        if (_.isString(currentFieldId) && \"\" !== currentFieldId) // Make fields is defined and only do the hack for cropped_image\n        {\n            if (_.isObject(this.params.fields[currentFieldId]) && \"upload\" === this.params.fields[currentFieldId].type) {\n                // If the attribute exists in the field\n                if (!_.isUndefined(this.params.fields[currentFieldId].mime_type)) // Set the attribute in the main object\n                return this.params.fields[currentFieldId].mime_type;\n            }\n        }\n        return \"image\";\n    },\n    removeImage: function(event) {\n        var $targetDiv, $uploadButton;\n        if (wp.customize.utils.isKeydownButNotEnterEvent(event)) return;\n        $targetDiv = this.$thisButton.closest(\".repeater-field-image,.repeater-field-cropped_image,.repeater-field-upload\");\n        $uploadButton = $targetDiv.find(\".upload-button\");\n        $targetDiv.find(\".kirki-image-attachment\").slideUp(\"fast\", function() {\n            jQuery(this).show().html(jQuery(this).data(\"placeholder\"));\n        });\n        $targetDiv.find(\".hidden-field\").val(\"\");\n        $uploadButton.text($uploadButton.data(\"label\"));\n        this.$thisButton.hide();\n        $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n    },\n    removeFile: function(event) {\n        var $targetDiv, $uploadButton;\n        if (wp.customize.utils.isKeydownButNotEnterEvent(event)) return;\n        $targetDiv = this.$thisButton.closest(\".repeater-field-upload\");\n        $uploadButton = $targetDiv.find(\".upload-button\");\n        $targetDiv.find(\".kirki-file-attachment\").slideUp(\"fast\", function() {\n            jQuery(this).show().html(jQuery(this).data(\"placeholder\"));\n        });\n        $targetDiv.find(\".hidden-field\").val(\"\");\n        $uploadButton.text($uploadButton.data(\"label\"));\n        this.$thisButton.hide();\n        $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n    },\n    /**\n   * Get the current value of the setting\n   *\n   * @returns {Object} - Returns the value.\n   */ // getValue: function () {\n    //   // The setting is saved in JSON\n    //   return this.params.value;\n    // },\n    getValue: function() {\n        // The setting is saved in JSON\n        let settings = this.setting.get();\n        return Array.isArray(settings) ? this.setting.get() : JSON.parse(decodeURI(this.setting.get()));\n    },\n    /**\n   * Set a new value for the setting\n   *\n   * @param {Object} newValue - The new value.\n   * @param {bool} refresh - If we want to refresh the previewer or not\n   * @param {bool} filtering - If we want to filter or not.\n   * @returns {void}\n   */ setValue: function(newValue, refresh, filtering) {\n        // We need to filter the values after the first load to remove data requrired for diplay but that we don't want to save in DB\n        var filteredValue = newValue, filter = [];\n        if (filtering) {\n            jQuery.each(this.params.fields, function(index, value) {\n                if (\"image\" === value.type || \"cropped_image\" === value.type || \"upload\" === value.type) filter.push(index);\n            });\n            jQuery.each(newValue, function(index, value) {\n                jQuery.each(filter, function(ind, field) {\n                    if (!_.isUndefined(value[field]) && !_.isUndefined(value[field].id)) filteredValue[index][field] = value[field].id;\n                });\n            });\n        }\n        this.setting.set(encodeURI(JSON.stringify(filteredValue)));\n        if (refresh) // Trigger the change event on the hidden field so\n        // previewer refresh the website on Customizer\n        this.settingField.trigger(\"change\");\n    },\n    /**\n   * Add a new row to repeater settings based on the structure.\n   *\n   * @param {Object} data - (Optional) Object of field => value pairs (undefined if you want to get the default values)\n   * @returns {Object} - Returns the new row.\n   */ addRow: function(data) {\n        var control = this, template = control.repeaterTemplate(), newRowSetting = {}, templateData, newRow, i;\n        if (template) {\n            // The control structure is going to define the new fields\n            // We need to clone control.params.fields. Assigning it\n            // ould result in a reference assignment.\n            templateData = jQuery.extend(true, {}, control.params.fields);\n            // But if we have passed data, we'll use the data values instead\n            if (data) {\n                for(i in data)if (data.hasOwnProperty(i) && templateData.hasOwnProperty(i)) templateData[i].default = data[i];\n            // Define new Current Index\n            } else {\n                const indices = Object.keys(control.rows);\n                // Convert indices to numbers and find the max\n                const lastIndex = Math.max(...indices.map((index)=>Number(index)));\n                this.currentIndex = lastIndex + 1;\n            }\n            templateData.index = this.currentIndex;\n            // Append the template content\n            template = template(templateData);\n            // Create a new row object and append the element\n            newRow = new $1abc80d3e2df1201$var$RepeaterRow(this.currentIndex, jQuery(template).appendTo(control.repeaterFieldsContainer), control.params.row_label, control);\n            newRow.container.on(\"row:remove\", function(e, rowIndex) {\n                control.deleteRow(rowIndex);\n            });\n            newRow.container.on(\"row:update\", function(e, rowIndex, fieldName, element) {\n                control.updateField.call(control, e, rowIndex, fieldName, element); // eslint-disable-line no-useless-call\n                newRow.updateLabel();\n            });\n            // Add the row to rows collection\n            this.rows[this.currentIndex] = newRow;\n            for(i in templateData)if (templateData.hasOwnProperty(i)) newRowSetting[i] = templateData[i].default;\n            if (!data) {\n                let settingValue = this.getValue(); // Get the current setting value.\n                settingValue[this.currentIndex] = newRowSetting;\n                this.setValue(settingValue, true);\n            }\n            this.currentIndex++;\n            return newRow;\n        }\n    },\n    sort: function() {\n        var control = this, $rows = this.repeaterFieldsContainer.find(\".repeater-row\"), newOrder = [], settings = control.getValue(), newRows = [], newSettings = [];\n        $rows.each(function(i, element) {\n            newOrder.push(jQuery(element).data(\"row\"));\n        });\n        jQuery.each(newOrder, function(newPosition, oldPosition) {\n            newRows[newPosition] = control.rows[oldPosition];\n            newRows[newPosition].setRowIndex(newPosition);\n            newSettings[newPosition] = settings[oldPosition];\n        });\n        control.rows = newRows;\n        control.setValue(newSettings);\n    },\n    /**\n   * Delete a row in the repeater setting\n   *\n   * @param {int} index - Position of the row in the complete Setting Array\n   * @returns {void}\n   */ deleteRow: function(index) {\n        var currentSettings = this.getValue(), row, prop;\n        if (currentSettings[index]) {\n            // Find the row\n            row = this.rows[index];\n            if (row) {\n                // Remove the row settings\n                delete currentSettings[index];\n                // Remove the row from the rows collection\n                delete this.rows[index];\n                // Update the new setting values\n                this.setValue(currentSettings, true);\n            }\n        }\n        // Remap the row numbers\n        for(prop in this.rows)if (this.rows.hasOwnProperty(prop) && this.rows[prop]) this.rows[prop].updateLabel();\n    },\n    /**\n   * Update a single field inside a row.\n   * Triggered when a field has changed\n   *\n   * @param {Object} e - Event Object\n   * @param {int} rowIndex - The row's index as an integer.\n   * @param {string} fieldId - The field ID.\n   * @param {string|Object} element - The element's identifier, or jQuery Object of the element.\n   * @returns {void}\n   */ updateField: function(e, rowIndex, fieldId, element) {\n        var type, row, currentSettings;\n        if (!this.rows[rowIndex]) return;\n        if (!this.params.fields[fieldId]) return;\n        type = this.params.fields[fieldId].type;\n        row = this.rows[rowIndex];\n        currentSettings = this.getValue();\n        element = jQuery(element);\n        if (_.isUndefined(currentSettings[row.rowIndex][fieldId])) return;\n        if (\"checkbox\" === type) currentSettings[row.rowIndex][fieldId] = element.is(\":checked\");\n        else // Update the settings\n        currentSettings[row.rowIndex][fieldId] = element.val();\n        this.setValue(currentSettings, true);\n    },\n    /**\n   * Init the color picker on color fields\n   * Called after AddRow\n   *\n   * @returns {void}\n   */ initColorPicker: function() {\n        var control = this;\n        var colorPicker = control.container.find(\".kirki-classic-color-picker\");\n        var fieldId = colorPicker.data(\"field\");\n        var options = {};\n        // We check if the color palette parameter is defined.\n        if (!_.isUndefined(fieldId) && !_.isUndefined(control.params.fields[fieldId]) && !_.isUndefined(control.params.fields[fieldId].palettes) && _.isObject(control.params.fields[fieldId].palettes)) options.palettes = control.params.fields[fieldId].palettes;\n        // When the color picker value is changed we update the value of the field\n        options.change = function(event, ui) {\n            var currentPicker = jQuery(event.target);\n            var row = currentPicker.closest(\".repeater-row\");\n            var rowIndex = row.data(\"row\");\n            var currentSettings = control.getValue();\n            var value = ui.color._alpha < 1 ? ui.color.to_s() : ui.color.toString();\n            currentSettings[rowIndex][currentPicker.data(\"field\")] = value;\n            control.setValue(currentSettings, true);\n            // By default if the alpha is 1, the input will be rgb.\n            // We setTimeout to 50ms to prevent race value set.\n            setTimeout(function() {\n                event.target.value = value;\n            }, 50);\n        };\n        // Init the color picker\n        if (colorPicker.length && 0 !== colorPicker.length) colorPicker.wpColorPicker(options);\n    },\n    /**\n   * Init the dropdown-pages field.\n   * Called after AddRow\n   *\n   * @param {object} theNewRow the row that was added to the repeater\n   * @param {object} data the data for the row if we're initializing a pre-existing row\n   * @returns {void}\n   */ initSelect: function(theNewRow, data) {\n        var control = this, dropdown = theNewRow.container.find(\".repeater-field select\"), dataField;\n        if (0 === dropdown.length) return;\n        dataField = dropdown.data(\"field\");\n        multiple = jQuery(dropdown).data(\"multiple\");\n        data = data || {};\n        data[dataField] = data[dataField] || \"\";\n        jQuery(dropdown).val(data[dataField] || jQuery(dropdown).val());\n        this.container.on(\"change\", \".repeater-field select\", function(event) {\n            var currentDropdown = jQuery(event.target), row = currentDropdown.closest(\".repeater-row\"), rowIndex = row.data(\"row\"), currentSettings = control.getValue();\n            currentSettings[rowIndex][currentDropdown.data(\"field\")] = jQuery(this).val();\n            control.setValue(currentSettings);\n        });\n    }\n});\n\n})();\n//# sourceMappingURL=control.js.map\n","import \"./control.scss\";\n\n/* global kirkiControlLoader */\n/* eslint max-depth: 0 */\n/* eslint no-useless-escape: 0 */\nvar RepeaterRow = function (rowIndex, container, label, control) {\n  var self = this;\n  this.rowIndex = rowIndex;\n  this.container = container;\n  this.label = label;\n  this.header = this.container.find(\".repeater-row-header\");\n\n  this.header.on(\"click\", function () {\n    self.toggleMinimize();\n  });\n\n  this.container.on(\"click\", \".repeater-row-remove\", function () {\n    self.remove();\n  });\n\n  this.header.on(\"mousedown\", function () {\n    self.container.trigger(\"row:start-dragging\");\n  });\n\n  this.container.on(\"keyup change\", \"input, select, textarea\", function (e) {\n    self.container.trigger(\"row:update\", [\n      self.rowIndex,\n      jQuery(e.target).data(\"field\"),\n      e.target,\n    ]);\n  });\n\n  this.setRowIndex = function (rowNum) {\n    this.rowIndex = rowNum;\n    this.container.attr(\"data-row\", rowNum);\n    this.container.data(\"row\", rowNum);\n    this.updateLabel();\n  };\n\n  this.toggleMinimize = function () {\n    // Store the previous state.\n    this.container.toggleClass(\"minimized\");\n    this.header\n      .find(\".dashicons\")\n      .toggleClass(\"dashicons-arrow-up\")\n      .toggleClass(\"dashicons-arrow-down\");\n  };\n\n  this.remove = function () {\n    this.container.slideUp(300, function () {\n      jQuery(this).detach();\n    });\n    this.container.trigger(\"row:remove\", [this.rowIndex]);\n  };\n\n  this.updateLabel = function () {\n    var rowLabelField, rowLabel, rowLabelSelector;\n\n    if (\"field\" === this.label.type) {\n      rowLabelField = this.container.find(\n        '.repeater-field [data-field=\"' + this.label.field + '\"]'\n      );\n      if (_.isFunction(rowLabelField.val)) {\n        rowLabel = rowLabelField.val();\n        if (\"\" !== rowLabel) {\n          if (!_.isUndefined(control.params.fields[this.label.field])) {\n            if (!_.isUndefined(control.params.fields[this.label.field].type)) {\n              if (\"select\" === control.params.fields[this.label.field].type) {\n                if (\n                  !_.isUndefined(\n                    control.params.fields[this.label.field].choices\n                  ) &&\n                  !_.isUndefined(\n                    control.params.fields[this.label.field].choices[\n                      rowLabelField.val()\n                    ]\n                  )\n                ) {\n                  rowLabel =\n                    control.params.fields[this.label.field].choices[\n                      rowLabelField.val()\n                    ];\n                }\n              } else if (\n                \"radio\" === control.params.fields[this.label.field].type ||\n                \"radio-image\" === control.params.fields[this.label.field].type\n              ) {\n                rowLabelSelector =\n                  control.selector +\n                  ' [data-row=\"' +\n                  this.rowIndex +\n                  '\"] .repeater-field [data-field=\"' +\n                  this.label.field +\n                  '\"]:checked';\n                rowLabel = jQuery(rowLabelSelector).val();\n              }\n            }\n          }\n          this.header.find(\".repeater-row-label\").text(rowLabel);\n          return;\n        }\n      }\n    }\n    this.header\n      .find(\".repeater-row-label\")\n      .text(this.label.value + \" \" + (this.rowIndex + 1));\n  };\n  this.updateLabel();\n};\n\nwp.customize.controlConstructor.repeater = wp.customize.Control.extend({\n  // When we're finished loading continue processing\n  ready: function () {\n    var control = this;\n\n    // Init the control.\n    if (\n      !_.isUndefined(window.kirkiControlLoader) &&\n      _.isFunction(kirkiControlLoader)\n    ) {\n      kirkiControlLoader(control);\n    } else {\n      control.initKirkiControl();\n    }\n  },\n\n  initKirkiControl: function (control) {\n    var limit, theNewRow, settingValue;\n    control = control || this;\n\n    // The current value set in Control Class (set in Kirki_Customize_Repeater_Control::to_json() function)\n    settingValue = control.params.value;\n\n    // The hidden field that keeps the data saved (though we never update it)\n    control.settingField = control.container\n      .find(\"[data-customize-setting-link]\")\n      .first();\n\n    // Set the field value for the first time, we'll fill it up later\n    // control.setValue([], false);\n\n    // The DIV that holds all the rows\n    control.repeaterFieldsContainer = control.container\n      .find(\".repeater-fields\")\n      .first();\n\n    // Set number of rows to 0\n    control.currentIndex = 0;\n\n    // Save the rows objects\n    control.rows = [];\n\n    // Default limit choice\n    limit = false;\n    if (!_.isUndefined(control.params.choices.limit)) {\n      limit =\n        0 >= control.params.choices.limit\n          ? false\n          : parseInt(control.params.choices.limit, 10);\n    }\n\n    control.container.on(\"click\", \"button.repeater-add\", function (e) {\n      e.preventDefault();\n      if (!limit || control.currentIndex < limit) {\n        theNewRow = control.addRow();\n        theNewRow.toggleMinimize();\n        control.initColorPicker();\n        control.initSelect(theNewRow);\n      } else {\n        jQuery(control.selector + \" .limit\").addClass(\"highlight\");\n      }\n    });\n\n    control.container.on(\"click\", \".repeater-row-remove\", function () {\n      control.currentIndex--;\n      if (!limit || control.currentIndex < limit) {\n        jQuery(control.selector + \" .limit\").removeClass(\"highlight\");\n      }\n    });\n\n    control.container.on(\n      \"click keypress\",\n      \".repeater-field-image .upload-button,.repeater-field-cropped_image .upload-button,.repeater-field-upload .upload-button\",\n      function (e) {\n        e.preventDefault();\n        control.$thisButton = jQuery(this);\n        control.openFrame(e);\n      }\n    );\n\n    control.container.on(\n      \"click keypress\",\n      \".repeater-field-image .remove-button,.repeater-field-cropped_image .remove-button\",\n      function (e) {\n        e.preventDefault();\n        control.$thisButton = jQuery(this);\n        control.removeImage(e);\n      }\n    );\n\n    control.container.on(\n      \"click keypress\",\n      \".repeater-field-upload .remove-button\",\n      function (e) {\n        e.preventDefault();\n        control.$thisButton = jQuery(this);\n        control.removeFile(e);\n      }\n    );\n\n    /**\n     * Function that loads the Mustache template\n     */\n    control.repeaterTemplate = _.memoize(function () {\n      var compiled,\n        /*\n         * Underscore's default ERB-style templates are incompatible with PHP\n         * when asp_tags is enabled, so WordPress uses Mustache-inspired templating syntax.\n         *\n         * @see trac ticket #22344.\n         */\n        options = {\n          evaluate: /<#([\\s\\S]+?)#>/g,\n          interpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n          escape: /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n          variable: \"data\",\n        };\n\n      return function (data) {\n        compiled = _.template(\n          control.container\n            .find(\".customize-control-repeater-content\")\n            .first()\n            .html(),\n          null,\n          options\n        );\n        return compiled(data);\n      };\n    });\n\n    // When we load the control, the fields have not been filled up\n    // This is the first time that we create all the rows\n    if (settingValue.length) {\n      _.each(settingValue, function (subValue) {\n        theNewRow = control.addRow(subValue);\n        control.initColorPicker();\n        control.initSelect(theNewRow, subValue);\n      });\n    }\n\n    control.repeaterFieldsContainer.sortable({\n      handle: \".repeater-row-header\",\n      update: function () {\n        control.sort();\n      },\n    });\n  },\n\n  /**\n   * Open the media modal.\n   *\n   * @param {Object} event - The JS event.\n   * @returns {void}\n   */\n  openFrame: function (event) {\n    if (wp.customize.utils.isKeydownButNotEnterEvent(event)) {\n      return;\n    }\n\n    if (\n      this.$thisButton\n        .closest(\".repeater-field\")\n        .hasClass(\"repeater-field-cropped_image\")\n    ) {\n      this.initCropperFrame();\n    } else {\n      this.initFrame();\n    }\n\n    this.frame.open();\n  },\n\n  initFrame: function () {\n    var libMediaType = this.getMimeType();\n\n    this.frame = wp.media({\n      states: [\n        new wp.media.controller.Library({\n          library: wp.media.query({ type: libMediaType }),\n          multiple: false,\n          date: false,\n        }),\n      ],\n    });\n\n    // When a file is selected, run a callback.\n    this.frame.on(\"select\", this.onSelect, this);\n  },\n\n  /**\n   * Create a media modal select frame, and store it so the instance can be reused when needed.\n   * This is mostly a copy/paste of Core api.CroppedImageControl in /wp-admin/js/customize-control.js\n   *\n   * @returns {void}\n   */\n  initCropperFrame: function () {\n    // We get the field id from which this was called\n    var currentFieldId = this.$thisButton\n        .siblings(\"input.hidden-field\")\n        .attr(\"data-field\"),\n      attrs = [\"width\", \"height\", \"flex_width\", \"flex_height\"], // A list of attributes to look for\n      libMediaType = this.getMimeType();\n\n    // Make sure we got it\n    if (_.isString(currentFieldId) && \"\" !== currentFieldId) {\n      // Make fields is defined and only do the hack for cropped_image\n      if (\n        _.isObject(this.params.fields[currentFieldId]) &&\n        \"cropped_image\" === this.params.fields[currentFieldId].type\n      ) {\n        //Iterate over the list of attributes\n        attrs.forEach(\n          function (el) {\n            // If the attribute exists in the field\n            if (!_.isUndefined(this.params.fields[currentFieldId][el])) {\n              // Set the attribute in the main object\n              this.params[el] = this.params.fields[currentFieldId][el];\n            }\n          }.bind(this)\n        );\n      }\n    }\n\n    this.frame = wp.media({\n      button: {\n        text: \"Select and Crop\",\n        close: false,\n      },\n      states: [\n        new wp.media.controller.Library({\n          library: wp.media.query({ type: libMediaType }),\n          multiple: false,\n          date: false,\n          suggestedWidth: this.params.width,\n          suggestedHeight: this.params.height,\n        }),\n        new wp.media.controller.CustomizeImageCropper({\n          imgSelectOptions: this.calculateImageSelectOptions,\n          control: this,\n        }),\n      ],\n    });\n\n    this.frame.on(\"select\", this.onSelectForCrop, this);\n    this.frame.on(\"cropped\", this.onCropped, this);\n    this.frame.on(\"skippedcrop\", this.onSkippedCrop, this);\n  },\n\n  onSelect: function () {\n    var attachment = this.frame.state().get(\"selection\").first().toJSON();\n\n    if (\n      this.$thisButton\n        .closest(\".repeater-field\")\n        .hasClass(\"repeater-field-upload\")\n    ) {\n      this.setFileInRepeaterField(attachment);\n    } else {\n      this.setImageInRepeaterField(attachment);\n    }\n  },\n\n  /**\n   * After an image is selected in the media modal, switch to the cropper\n   * state if the image isn't the right size.\n   */\n\n  onSelectForCrop: function () {\n    var attachment = this.frame.state().get(\"selection\").first().toJSON();\n\n    if (\n      this.params.width === attachment.width &&\n      this.params.height === attachment.height &&\n      !this.params.flex_width &&\n      !this.params.flex_height\n    ) {\n      this.setImageInRepeaterField(attachment);\n    } else {\n      this.frame.setState(\"cropper\");\n    }\n  },\n\n  /**\n   * After the image has been cropped, apply the cropped image data to the setting.\n   *\n   * @param {object} croppedImage Cropped attachment data.\n   * @returns {void}\n   */\n  onCropped: function (croppedImage) {\n    this.setImageInRepeaterField(croppedImage);\n  },\n\n  /**\n   * Returns a set of options, computed from the attached image data and\n   * control-specific data, to be fed to the imgAreaSelect plugin in\n   * wp.media.view.Cropper.\n   *\n   * @param {wp.media.model.Attachment} attachment - The attachment from the WP API.\n   * @param {wp.media.controller.Cropper} controller - Media controller.\n   * @returns {Object} - Options.\n   */\n  calculateImageSelectOptions: function (attachment, controller) {\n    var control = controller.get(\"control\"),\n      flexWidth = !!parseInt(control.params.flex_width, 10),\n      flexHeight = !!parseInt(control.params.flex_height, 10),\n      realWidth = attachment.get(\"width\"),\n      realHeight = attachment.get(\"height\"),\n      xInit = parseInt(control.params.width, 10),\n      yInit = parseInt(control.params.height, 10),\n      ratio = xInit / yInit,\n      xImg = realWidth,\n      yImg = realHeight,\n      x1,\n      y1,\n      imgSelectOptions;\n\n    controller.set(\n      \"canSkipCrop\",\n      !control.mustBeCropped(\n        flexWidth,\n        flexHeight,\n        xInit,\n        yInit,\n        realWidth,\n        realHeight\n      )\n    );\n\n    if (xImg / yImg > ratio) {\n      yInit = yImg;\n      xInit = yInit * ratio;\n    } else {\n      xInit = xImg;\n      yInit = xInit / ratio;\n    }\n\n    x1 = (xImg - xInit) / 2;\n    y1 = (yImg - yInit) / 2;\n\n    imgSelectOptions = {\n      handles: true,\n      keys: true,\n      instance: true,\n      persistent: true,\n      imageWidth: realWidth,\n      imageHeight: realHeight,\n      x1: x1,\n      y1: y1,\n      x2: xInit + x1,\n      y2: yInit + y1,\n    };\n\n    if (false === flexHeight && false === flexWidth) {\n      imgSelectOptions.aspectRatio = xInit + \":\" + yInit;\n    }\n    if (false === flexHeight) {\n      imgSelectOptions.maxHeight = yInit;\n    }\n    if (false === flexWidth) {\n      imgSelectOptions.maxWidth = xInit;\n    }\n\n    return imgSelectOptions;\n  },\n\n  /**\n   * Return whether the image must be cropped, based on required dimensions.\n   *\n   * @param {bool} flexW - The flex-width.\n   * @param {bool} flexH - The flex-height.\n   * @param {int}  dstW - Initial point distance in the X axis.\n   * @param {int}  dstH - Initial point distance in the Y axis.\n   * @param {int}  imgW - Width.\n   * @param {int}  imgH - Height.\n   * @returns {bool} - Whether the image must be cropped or not based on required dimensions.\n   */\n  mustBeCropped: function (flexW, flexH, dstW, dstH, imgW, imgH) {\n    return !(\n      (true === flexW && true === flexH) ||\n      (true === flexW && dstH === imgH) ||\n      (true === flexH && dstW === imgW) ||\n      (dstW === imgW && dstH === imgH) ||\n      imgW <= dstW\n    );\n  },\n\n  /**\n   * If cropping was skipped, apply the image data directly to the setting.\n   *\n   * @returns {void}\n   */\n  onSkippedCrop: function () {\n    var attachment = this.frame.state().get(\"selection\").first().toJSON();\n    this.setImageInRepeaterField(attachment);\n  },\n\n  /**\n   * Updates the setting and re-renders the control UI.\n   *\n   * @param {object} attachment - The attachment object.\n   * @returns {void}\n   */\n  setImageInRepeaterField: function (attachment) {\n    var $targetDiv = this.$thisButton.closest(\n      \".repeater-field-image,.repeater-field-cropped_image\"\n    );\n\n    $targetDiv\n      .find(\".kirki-image-attachment\")\n      .html('<img src=\"' + attachment.url + '\">')\n      .hide()\n      .slideDown(\"slow\");\n\n    $targetDiv.find(\".hidden-field\").val(attachment.id);\n    this.$thisButton.text(this.$thisButton.data(\"alt-label\"));\n    $targetDiv.find(\".remove-button\").show();\n\n    //This will activate the save button\n    $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n    this.frame.close();\n  },\n\n  /**\n   * Updates the setting and re-renders the control UI.\n   *\n   * @param {object} attachment - The attachment object.\n   * @returns {void}\n   */\n  setFileInRepeaterField: function (attachment) {\n    var $targetDiv = this.$thisButton.closest(\".repeater-field-upload\");\n\n    $targetDiv\n      .find(\".kirki-file-attachment\")\n      .html(\n        '<span class=\"file\"><span class=\"dashicons dashicons-media-default\"></span> ' +\n          attachment.filename +\n          \"</span>\"\n      )\n      .hide()\n      .slideDown(\"slow\");\n\n    $targetDiv.find(\".hidden-field\").val(attachment.id);\n    this.$thisButton.text(this.$thisButton.data(\"alt-label\"));\n    $targetDiv.find(\".upload-button\").show();\n    $targetDiv.find(\".remove-button\").show();\n\n    //This will activate the save button\n    $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n    this.frame.close();\n  },\n\n  getMimeType: function () {\n    // We get the field id from which this was called\n    var currentFieldId = this.$thisButton\n      .siblings(\"input.hidden-field\")\n      .attr(\"data-field\");\n\n    // Make sure we got it\n    if (_.isString(currentFieldId) && \"\" !== currentFieldId) {\n      // Make fields is defined and only do the hack for cropped_image\n      if (\n        _.isObject(this.params.fields[currentFieldId]) &&\n        \"upload\" === this.params.fields[currentFieldId].type\n      ) {\n        // If the attribute exists in the field\n        if (!_.isUndefined(this.params.fields[currentFieldId].mime_type)) {\n          // Set the attribute in the main object\n          return this.params.fields[currentFieldId].mime_type;\n        }\n      }\n    }\n    return \"image\";\n  },\n\n  removeImage: function (event) {\n    var $targetDiv, $uploadButton;\n\n    if (wp.customize.utils.isKeydownButNotEnterEvent(event)) {\n      return;\n    }\n\n    $targetDiv = this.$thisButton.closest(\n      \".repeater-field-image,.repeater-field-cropped_image,.repeater-field-upload\"\n    );\n    $uploadButton = $targetDiv.find(\".upload-button\");\n\n    $targetDiv.find(\".kirki-image-attachment\").slideUp(\"fast\", function () {\n      jQuery(this).show().html(jQuery(this).data(\"placeholder\"));\n    });\n    $targetDiv.find(\".hidden-field\").val(\"\");\n    $uploadButton.text($uploadButton.data(\"label\"));\n    this.$thisButton.hide();\n\n    $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n  },\n\n  removeFile: function (event) {\n    var $targetDiv, $uploadButton;\n\n    if (wp.customize.utils.isKeydownButNotEnterEvent(event)) {\n      return;\n    }\n\n    $targetDiv = this.$thisButton.closest(\".repeater-field-upload\");\n    $uploadButton = $targetDiv.find(\".upload-button\");\n\n    $targetDiv.find(\".kirki-file-attachment\").slideUp(\"fast\", function () {\n      jQuery(this).show().html(jQuery(this).data(\"placeholder\"));\n    });\n    $targetDiv.find(\".hidden-field\").val(\"\");\n    $uploadButton.text($uploadButton.data(\"label\"));\n    this.$thisButton.hide();\n\n    $targetDiv.find(\"input, textarea, select\").trigger(\"change\");\n  },\n\n  /**\n   * Get the current value of the setting\n   *\n   * @returns {Object} - Returns the value.\n   */\n  // getValue: function () {\n  //   // The setting is saved in JSON\n  //   return this.params.value;\n  // },\n  getValue: function () {\n    // The setting is saved in JSON\n    let settings = this.setting.get();\n    return Array.isArray(settings) ? this.setting.get() : JSON.parse(decodeURI(this.setting.get()));\n  },\n\n  /**\n   * Set a new value for the setting\n   *\n   * @param {Object} newValue - The new value.\n   * @param {bool} refresh - If we want to refresh the previewer or not\n   * @param {bool} filtering - If we want to filter or not.\n   * @returns {void}\n   */\n  setValue: function (newValue, refresh, filtering) {\n    // We need to filter the values after the first load to remove data requrired for diplay but that we don't want to save in DB\n    var filteredValue = newValue,\n      filter = [];\n\n    if (filtering) {\n      jQuery.each(this.params.fields, function (index, value) {\n        if (\n          \"image\" === value.type ||\n          \"cropped_image\" === value.type ||\n          \"upload\" === value.type\n        ) {\n          filter.push(index);\n        }\n      });\n      jQuery.each(newValue, function (index, value) {\n        jQuery.each(filter, function (ind, field) {\n          if (!_.isUndefined(value[field]) && !_.isUndefined(value[field].id)) {\n            filteredValue[index][field] = value[field].id;\n          }\n        });\n      });\n    }\n\n    this.setting.set(encodeURI(JSON.stringify(filteredValue)));\n\n    if (refresh) {\n      // Trigger the change event on the hidden field so\n      // previewer refresh the website on Customizer\n      this.settingField.trigger(\"change\");\n    }\n  },\n\n  /**\n   * Add a new row to repeater settings based on the structure.\n   *\n   * @param {Object} data - (Optional) Object of field => value pairs (undefined if you want to get the default values)\n   * @returns {Object} - Returns the new row.\n   */\n  addRow: function (data) {\n    var control = this,\n      template = control.repeaterTemplate(), // The template for the new row (defined on Kirki_Customize_Repeater_Control::render_content() ).\n      newRowSetting = {}, // Saves the new setting data.\n      templateData, // Data to pass to the template\n      newRow,\n      i;\n\n    if (template) {\n      // The control structure is going to define the new fields\n      // We need to clone control.params.fields. Assigning it\n      // ould result in a reference assignment.\n      templateData = jQuery.extend(true, {}, control.params.fields);\n\n      // But if we have passed data, we'll use the data values instead\n      if (data) {\n        for (i in data) {\n          if (data.hasOwnProperty(i) && templateData.hasOwnProperty(i)) {\n            templateData[i].default = data[i];\n          }\n        }\n      \n      // Define new Current Index\n      } else {\n        const indices = Object.keys(control.rows);\n        \n        // Convert indices to numbers and find the max\n        const lastIndex = Math.max(...indices.map(index => Number(index)));\n\n        this.currentIndex = lastIndex + 1;\n      }\n\n      templateData.index = this.currentIndex;\n\n      // Append the template content\n      template = template(templateData);\n\n      // Create a new row object and append the element\n      newRow = new RepeaterRow(\n        this.currentIndex,\n        jQuery(template).appendTo(control.repeaterFieldsContainer),\n        control.params.row_label,\n        control\n      );\n\n      newRow.container.on(\"row:remove\", function (e, rowIndex) {\n        control.deleteRow(rowIndex);\n      });\n\n      newRow.container.on(\n        \"row:update\",\n        function (e, rowIndex, fieldName, element) {\n          control.updateField.call(control, e, rowIndex, fieldName, element); // eslint-disable-line no-useless-call\n          newRow.updateLabel();\n        }\n      );\n\n      // Add the row to rows collection\n      this.rows[this.currentIndex] = newRow;\n\n      for (i in templateData) {\n        if (templateData.hasOwnProperty(i)) {\n          newRowSetting[i] = templateData[i].default;\n        }\n      }\n\n      if ( !data ) {\n        let settingValue = this.getValue(); // Get the current setting value.\n\n        settingValue[this.currentIndex] = newRowSetting;\n        this.setValue(settingValue, true);\n      }\n\n      this.currentIndex++;\n\n      return newRow;\n    }\n  },\n\n  sort: function () {\n    var control = this,\n      $rows = this.repeaterFieldsContainer.find(\".repeater-row\"),\n      newOrder = [],\n      settings = control.getValue(),\n      newRows = [],\n      newSettings = [];\n\n    $rows.each(function (i, element) {\n      newOrder.push(jQuery(element).data(\"row\"));\n    });\n\n    jQuery.each(newOrder, function (newPosition, oldPosition) {\n      newRows[newPosition] = control.rows[oldPosition];\n      newRows[newPosition].setRowIndex(newPosition);\n\n      newSettings[newPosition] = settings[oldPosition];\n    });\n\n    control.rows = newRows;\n    control.setValue(newSettings);\n  },\n\n  /**\n   * Delete a row in the repeater setting\n   *\n   * @param {int} index - Position of the row in the complete Setting Array\n   * @returns {void}\n   */\n  deleteRow: function (index) {\n    var currentSettings = this.getValue(),\n      row,\n      prop;\n\n    if (currentSettings[index]) {\n      // Find the row\n      row = this.rows[index];\n      if (row) {\n        // Remove the row settings\n        delete currentSettings[index];\n\n        // Remove the row from the rows collection\n        delete this.rows[index];\n\n        // Update the new setting values\n        this.setValue(currentSettings, true);\n      }\n    }\n\n    // Remap the row numbers\n    for (prop in this.rows) {\n      if (this.rows.hasOwnProperty(prop) && this.rows[prop]) {\n        this.rows[prop].updateLabel();\n      }\n    }\n  },\n\n  /**\n   * Update a single field inside a row.\n   * Triggered when a field has changed\n   *\n   * @param {Object} e - Event Object\n   * @param {int} rowIndex - The row's index as an integer.\n   * @param {string} fieldId - The field ID.\n   * @param {string|Object} element - The element's identifier, or jQuery Object of the element.\n   * @returns {void}\n   */\n  updateField: function (e, rowIndex, fieldId, element) {\n    var type, row, currentSettings;\n\n    if (!this.rows[rowIndex]) {\n      return;\n    }\n\n    if (!this.params.fields[fieldId]) {\n      return;\n    }\n\n    type = this.params.fields[fieldId].type;\n    row = this.rows[rowIndex];\n    currentSettings = this.getValue();\n\n    element = jQuery(element);\n\n    if (_.isUndefined(currentSettings[row.rowIndex][fieldId])) {\n      return;\n    }\n\n    if (\"checkbox\" === type) {\n      currentSettings[row.rowIndex][fieldId] = element.is(\":checked\");\n    } else {\n      // Update the settings\n      currentSettings[row.rowIndex][fieldId] = element.val();\n    }\n    this.setValue(currentSettings, true);\n  },\n\n  /**\n   * Init the color picker on color fields\n   * Called after AddRow\n   *\n   * @returns {void}\n   */\n  initColorPicker: function () {\n    var control = this;\n    var colorPicker = control.container.find(\".kirki-classic-color-picker\");\n    var fieldId = colorPicker.data(\"field\");\n    var options = {};\n\n    // We check if the color palette parameter is defined.\n    if (\n      !_.isUndefined(fieldId) &&\n      !_.isUndefined(control.params.fields[fieldId]) &&\n      !_.isUndefined(control.params.fields[fieldId].palettes) &&\n      _.isObject(control.params.fields[fieldId].palettes)\n    ) {\n      options.palettes = control.params.fields[fieldId].palettes;\n    }\n\n    // When the color picker value is changed we update the value of the field\n    options.change = function (event, ui) {\n      var currentPicker = jQuery(event.target);\n      var row = currentPicker.closest(\".repeater-row\");\n      var rowIndex = row.data(\"row\");\n      var currentSettings = control.getValue();\n      var value = ui.color._alpha < 1 ? ui.color.to_s() : ui.color.toString();\n\n      currentSettings[rowIndex][currentPicker.data(\"field\")] = value;\n      control.setValue(currentSettings, true);\n\n\t\t\t// By default if the alpha is 1, the input will be rgb.\n\t\t\t// We setTimeout to 50ms to prevent race value set.\n\t\t\tsetTimeout(function() {\n\t\t\t\tevent.target.value = value;\n\t\t\t}, 50);\n    };\n\n    // Init the color picker\n    if (colorPicker.length && 0 !== colorPicker.length) {\n      colorPicker.wpColorPicker(options);\n    }\n  },\n\n  /**\n   * Init the dropdown-pages field.\n   * Called after AddRow\n   *\n   * @param {object} theNewRow the row that was added to the repeater\n   * @param {object} data the data for the row if we're initializing a pre-existing row\n   * @returns {void}\n   */\n  initSelect: function (theNewRow, data) {\n    var control = this,\n      dropdown = theNewRow.container.find(\".repeater-field select\"),\n      dataField;\n\n    if (0 === dropdown.length) {\n      return;\n    }\n\n    dataField = dropdown.data(\"field\");\n    multiple = jQuery(dropdown).data(\"multiple\");\n\n    data = data || {};\n    data[dataField] = data[dataField] || \"\";\n\n    jQuery(dropdown).val(data[dataField] || jQuery(dropdown).val());\n\n    this.container.on(\"change\", \".repeater-field select\", function (event) {\n      var currentDropdown = jQuery(event.target),\n        row = currentDropdown.closest(\".repeater-row\"),\n        rowIndex = row.data(\"row\"),\n        currentSettings = control.getValue();\n\n      currentSettings[rowIndex][currentDropdown.data(\"field\")] =\n        jQuery(this).val();\n      control.setValue(currentSettings);\n    });\n  },\n});"],"names":["$1abc80d3e2df1201$var$RepeaterRow","rowIndex","container","label","control","self","header","find","on","toggleMinimize","remove","trigger","e","jQuery","target","data","setRowIndex","rowNum","attr","updateLabel","toggleClass","slideUp","detach","rowLabelField","rowLabel","type","field","_","isFunction","val","isUndefined","params","fields","choices","selector","text","value","wp","customize","controlConstructor","repeater","Control","extend","ready","window","kirkiControlLoader","initKirkiControl","limit","theNewRow","settingValue","settingField","first","repeaterFieldsContainer","currentIndex","rows","parseInt","preventDefault","addRow","initColorPicker","initSelect","addClass","removeClass","$thisButton","openFrame","removeImage","removeFile","repeaterTemplate","memoize","options","evaluate","interpolate","escape","variable","compiled","template","html","length","each","subValue","sortable","handle","update","sort","event","utils","isKeydownButNotEnterEvent","closest","hasClass","initCropperFrame","initFrame","frame","open","libMediaType","getMimeType","media","states","controller","Library","library","query","multiple","date","onSelect","currentFieldId","siblings","isString","isObject","attrs","forEach","el","bind","button","close","suggestedWidth","width","suggestedHeight","height","CustomizeImageCropper","imgSelectOptions","calculateImageSelectOptions","onSelectForCrop","onCropped","onSkippedCrop","attachment","state","get","toJSON","setFileInRepeaterField","setImageInRepeaterField","flex_width","flex_height","setState","croppedImage","x1","y1","flexWidth","flexHeight","realWidth","realHeight","xInit","yInit","ratio","set","mustBeCropped","xImg","yImg","handles","keys","instance","persistent","imageWidth","imageHeight","x2","y2","aspectRatio","maxHeight","maxWidth","flexW","flexH","dstW","dstH","imgW","imgH","$targetDiv","url","hide","slideDown","id","show","filename","mime_type","$uploadButton","getValue","Array","isArray","setting","JSON","parse","decodeURI","setValue","newValue","refresh","filtering","filter","index","push","ind","filteredValue","encodeURI","stringify","templateData","newRow","i","newRowSetting","hasOwnProperty","default","lastIndex","Math","max","indices","Object","map","Number","appendTo","row_label","deleteRow","fieldName","element","updateField","call","$rows","newOrder","settings","newRows","newSettings","newPosition","oldPosition","prop","currentSettings","fieldId","row","is","colorPicker","palettes","change","ui","currentPicker","color","_alpha","to_s","toString","setTimeout","wpColorPicker","dataField","dropdown","currentDropdown"],"version":3,"file":"control.js.map"}