{"mappings":"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","sources":["<anon>","src/control.js","src/KirkiInputSliderControl.js","src/KirkiInputSliderForm.js","React.js"],"sourcesContent":["(function () {\n\nvar $5b55226219c5badd$exports = {};\n$5b55226219c5badd$exports = React;\n\n\nconst $5e62cac5aac90bdd$var$KirkiInputSliderForm = (props)=>{\n    const { control: control, customizerSetting: customizerSetting, choices: choices } = props;\n    let trigger = \"\";\n    const validateValue = (value)=>{\n        if ('' != value) {\n            if (value < choices.min) value = choices.min;\n            if (value > choices.max) value = choices.max;\n        }\n        return value;\n    };\n    const getValueObject = (value)=>{\n        value = \"string\" !== typeof value ? value.toString() : value;\n        const valueUnit = value.replace(/\\d+/g, \"\");\n        let valueNumber = value.replace(valueUnit, \"\");\n        valueNumber = '' != valueNumber ? parseFloat(valueNumber.trim()) : '';\n        valueNumber = validateValue(valueNumber);\n        return {\n            number: valueNumber,\n            unit: valueUnit\n        };\n    };\n    const getValueForInput = (value)=>{\n        const valueObject = getValueObject(value);\n        return valueObject.number + valueObject.unit;\n    };\n    const getValueForSlider = (value)=>{\n        return getValueObject(value).number;\n    };\n    control.updateComponentState = (val)=>{\n        if (\"slider\" === trigger) valueRef.current.value = getValueForInput(val);\n        else if (\"input\" === trigger) sliderRef.current.value = getValueForSlider(val);\n        else if (\"reset\" === trigger) {\n            valueRef.current.value = val;\n            sliderRef.current.value = val;\n        }\n    };\n    const handleInputChange = (e)=>{\n        trigger = \"input\";\n        customizerSetting.set(getValueForInput(e.target.value));\n    };\n    const handleSliderChange = (e)=>{\n        trigger = \"slider\";\n        let value = parseFloat(e.target.value);\n        value = validateValue(value);\n        const inputValueObj = getValueObject(valueRef.current.value); // We're going to use the unit.\n        const valueForInput = value + inputValueObj.unit;\n        customizerSetting.set(valueForInput);\n    };\n    const handleReset = (e)=>{\n        if (\"\" !== props.default && \"undefined\" !== typeof props.default) {\n            sliderRef.current.value = props.default;\n            valueRef.current.value = props.default;\n        } else if (\"\" !== props.value) {\n            sliderRef.current.value = props.value;\n            valueRef.current.value = props.value;\n        } else {\n            sliderRef.current.value = choices.min;\n            valueRef.current.value = \"\";\n        }\n        trigger = \"reset\";\n        customizerSetting.set(sliderRef.current.value);\n    };\n    const handleKeyDown = (e)=>{\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            e.preventDefault();\n            const currentValue = getValueForSlider(valueRef.current.value);\n            const step = choices.step || 1;\n            let newValue = currentValue;\n            if (e.key === 'ArrowUp') newValue = currentValue + step;\n            else if (e.key === 'ArrowDown') newValue = currentValue - step;\n            newValue = validateValue(newValue);\n            const inputValueObj = getValueObject(valueRef.current.value);\n            const valueForInput = newValue + inputValueObj.unit;\n            // Update both input and slider values\n            valueRef.current.value = valueForInput;\n            sliderRef.current.value = newValue;\n            trigger = 'input';\n            customizerSetting.set(valueForInput);\n        }\n    };\n    // Preparing for the template.\n    const fieldId = `kirki-control-input-${customizerSetting.id}`;\n    const sliderValue = getValueForSlider(props.value);\n    const inputValue = getValueForInput(props.value);\n    const sliderRef = (0, $5b55226219c5badd$exports.useRef)(null);\n    const valueRef = (0, $5b55226219c5badd$exports.useRef)(null);\n    return /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"kirki-control-form\",\n        tabIndex: \"1\"\n    }, /*#__PURE__*/ React.createElement(\"label\", {\n        className: \"kirki-control-label\",\n        htmlFor: fieldId\n    }, /*#__PURE__*/ React.createElement(\"span\", {\n        className: \"customize-control-title\"\n    }, props.label), /*#__PURE__*/ React.createElement(\"span\", {\n        className: \"customize-control-description description\",\n        dangerouslySetInnerHTML: {\n            __html: props.description\n        }\n    })), /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"customize-control-notifications-container\",\n        ref: props.setNotificationContainer\n    }), /*#__PURE__*/ React.createElement(\"button\", {\n        type: \"button\",\n        className: \"kirki-control-reset\",\n        onClick: handleReset\n    }, /*#__PURE__*/ React.createElement(\"i\", {\n        className: \"dashicons dashicons-image-rotate\"\n    })), /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"kirki-control-cols\"\n    }, /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"kirki-control-left-col\"\n    }, /*#__PURE__*/ React.createElement(\"input\", {\n        ref: sliderRef,\n        type: \"range\",\n        id: fieldId,\n        defaultValue: sliderValue,\n        min: choices.min,\n        max: choices.max,\n        step: choices.step,\n        className: \"kirki-control-input-slider kirki-pro-control-input-slider\",\n        onChange: handleSliderChange\n    })), /*#__PURE__*/ React.createElement(\"div\", {\n        className: \"kirki-control-right-col\"\n    }, /*#__PURE__*/ React.createElement(\"input\", {\n        ref: valueRef,\n        type: \"text\",\n        defaultValue: inputValue,\n        className: \"kirki-control-input\",\n        onChange: handleInputChange,\n        onKeyDown: handleKeyDown\n    }))));\n};\nvar $5e62cac5aac90bdd$export$2e2bcd8739ae039 = $5e62cac5aac90bdd$var$KirkiInputSliderForm;\n\n\nfunction $a8a3b6d68a8446d2$var$_extends() {\n    return $a8a3b6d68a8446d2$var$_extends = Object.assign ? Object.assign.bind() : function(n) {\n        for(var e = 1; e < arguments.length; e++){\n            var t = arguments[e];\n            for(var r in t)({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n        }\n        return n;\n    }, $a8a3b6d68a8446d2$var$_extends.apply(null, arguments);\n}\n/**\r\n * KirkiInputSliderControl.\r\n *\r\n * Global objects brought:\r\n * - wp\r\n * - jQuery\r\n * - React\r\n * - ReactDOM\r\n *\r\n * @class\r\n * @augments wp.customize.Control\r\n * @augments wp.customize.Class\r\n */ const $a8a3b6d68a8446d2$var$KirkiInputSliderControl = wp.customize.Control.extend({\n    /**\r\n   * Initialize.\r\n   *\r\n   * @param {string} id - Control ID.\r\n   * @param {object} params - Control params.\r\n   */ initialize: function(id, params) {\n        const control = this;\n        // Bind functions to this control context for passing as React props.\n        control.setNotificationContainer = control.setNotificationContainer.bind(control);\n        wp.customize.Control.prototype.initialize.call(control, id, params);\n        // The following should be eliminated with <https://core.trac.wordpress.org/ticket/31334>.\n        function onRemoved(removedControl) {\n            if (control === removedControl) {\n                control.destroy();\n                control.container.remove();\n                wp.customize.control.unbind(\"removed\", onRemoved);\n            }\n        }\n        wp.customize.control.bind(\"removed\", onRemoved);\n    },\n    /**\r\n   * Set notification container and render.\r\n   *\r\n   * This is called when the React component is mounted.\r\n   *\r\n   * @param {Element} element - Notification container.\r\n   * @returns {void}\r\n   */ setNotificationContainer: function setNotificationContainer(element) {\n        const control = this;\n        control.notifications.container = jQuery(element);\n        control.notifications.render();\n    },\n    /**\r\n   * Render the control into the DOM.\r\n   *\r\n   * This is called from the Control#embed() method in the parent class.\r\n   *\r\n   * @returns {void}\r\n   */ renderContent: function renderContent() {\n        const control = this;\n        ReactDOM.render(/*#__PURE__*/ React.createElement((0, $5e62cac5aac90bdd$export$2e2bcd8739ae039), $a8a3b6d68a8446d2$var$_extends({}, control.params, {\n            control: control,\n            customizerSetting: control.setting,\n            setNotificationContainer: control.setNotificationCotainer,\n            value: control.params.value\n        })), control.container[0]);\n        if (false !== control.params.choices.allowCollapse) control.container.addClass(\"allowCollapse\");\n    },\n    /**\r\n   * After control has been first rendered, start re-rendering when setting changes.\r\n   *\r\n   * React is able to be used here instead of the wp.customize.Element abstraction.\r\n   *\r\n   * @returns {void}\r\n   */ ready: function ready() {\n        const control = this;\n        /**\r\n     * Update component value's state when customizer setting's value is changed.\r\n     */ control.setting.bind((val)=>{\n            control.updateComponentState(val);\n        });\n    },\n    /**\r\n   * This method will be overriden by the rendered component.\r\n   */ updateComponentState: (val)=>{},\n    /**\r\n   * Handle removal/de-registration of the control.\r\n   *\r\n   * This is essentially the inverse of the Control#embed() method.\r\n   *\r\n   * @link https://core.trac.wordpress.org/ticket/31334\r\n   * @returns {void}\r\n   */ destroy: function destroy() {\n        const control = this;\n        // Garbage collection: undo mounting that was done in the embed/renderContent method.\n        ReactDOM.unmountComponentAtNode(control.container[0]);\n        // Call destroy method in parent if it exists (as of #31334).\n        if (wp.customize.Control.prototype.destroy) wp.customize.Control.prototype.destroy.call(control);\n    }\n});\nvar $a8a3b6d68a8446d2$export$2e2bcd8739ae039 = $a8a3b6d68a8446d2$var$KirkiInputSliderControl;\n\n\n// Register control type with Customizer.\nwp.customize.controlConstructor['kirki-input-slider'] = (0, $a8a3b6d68a8446d2$export$2e2bcd8739ae039);\n\n})();\n//# sourceMappingURL=control.js.map\n","import \"./control.scss\";\r\nimport KirkiInputSliderControl from './KirkiInputSliderControl';\r\n\r\n\r\n// Register control type with Customizer.\r\nwp.customize.controlConstructor['kirki-input-slider'] = KirkiInputSliderControl;\r\n","import KirkiInputSliderForm from \"./KirkiInputSliderForm\";\r\n\r\n/**\r\n * KirkiInputSliderControl.\r\n *\r\n * Global objects brought:\r\n * - wp\r\n * - jQuery\r\n * - React\r\n * - ReactDOM\r\n *\r\n * @class\r\n * @augments wp.customize.Control\r\n * @augments wp.customize.Class\r\n */\r\nconst KirkiInputSliderControl = wp.customize.Control.extend({\r\n  /**\r\n   * Initialize.\r\n   *\r\n   * @param {string} id - Control ID.\r\n   * @param {object} params - Control params.\r\n   */\r\n  initialize: function (id, params) {\r\n    const control = this;\r\n\r\n    // Bind functions to this control context for passing as React props.\r\n    control.setNotificationContainer =\r\n      control.setNotificationContainer.bind(control);\r\n\r\n    wp.customize.Control.prototype.initialize.call(control, id, params);\r\n\r\n    // The following should be eliminated with <https://core.trac.wordpress.org/ticket/31334>.\r\n    function onRemoved(removedControl) {\r\n      if (control === removedControl) {\r\n        control.destroy();\r\n        control.container.remove();\r\n        wp.customize.control.unbind(\"removed\", onRemoved);\r\n      }\r\n    }\r\n\r\n    wp.customize.control.bind(\"removed\", onRemoved);\r\n  },\r\n\r\n  /**\r\n   * Set notification container and render.\r\n   *\r\n   * This is called when the React component is mounted.\r\n   *\r\n   * @param {Element} element - Notification container.\r\n   * @returns {void}\r\n   */\r\n  setNotificationContainer: function setNotificationContainer(element) {\r\n    const control = this;\r\n\r\n    control.notifications.container = jQuery(element);\r\n    control.notifications.render();\r\n  },\r\n\r\n  /**\r\n   * Render the control into the DOM.\r\n   *\r\n   * This is called from the Control#embed() method in the parent class.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  renderContent: function renderContent() {\r\n    const control = this;\r\n\r\n    ReactDOM.render(\r\n      <KirkiInputSliderForm\r\n        {...control.params}\r\n        control={control}\r\n        customizerSetting={control.setting}\r\n        setNotificationContainer={control.setNotificationCotainer}\r\n        value={control.params.value}\r\n      />,\r\n      control.container[0]\r\n    );\r\n\r\n    if (false !== control.params.choices.allowCollapse) {\r\n      control.container.addClass(\"allowCollapse\");\r\n    }\r\n  },\r\n\r\n  /**\r\n   * After control has been first rendered, start re-rendering when setting changes.\r\n   *\r\n   * React is able to be used here instead of the wp.customize.Element abstraction.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  ready: function ready() {\r\n    const control = this;\r\n\r\n    /**\r\n     * Update component value's state when customizer setting's value is changed.\r\n     */\r\n    control.setting.bind((val) => {\r\n      control.updateComponentState(val);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * This method will be overriden by the rendered component.\r\n   */\r\n  updateComponentState: (val) => {},\r\n\r\n  /**\r\n   * Handle removal/de-registration of the control.\r\n   *\r\n   * This is essentially the inverse of the Control#embed() method.\r\n   *\r\n   * @link https://core.trac.wordpress.org/ticket/31334\r\n   * @returns {void}\r\n   */\r\n  destroy: function destroy() {\r\n    const control = this;\r\n\r\n    // Garbage collection: undo mounting that was done in the embed/renderContent method.\r\n    ReactDOM.unmountComponentAtNode(control.container[0]);\r\n\r\n    // Call destroy method in parent if it exists (as of #31334).\r\n    if (wp.customize.Control.prototype.destroy) {\r\n      wp.customize.Control.prototype.destroy.call(control);\r\n    }\r\n  },\r\n});\r\n\r\nexport default KirkiInputSliderControl;\r\n","import { useRef } from \"react\";\r\n\r\nconst KirkiInputSliderForm = (props) => {\r\n  const { control, customizerSetting, choices } = props;\r\n\r\n  let trigger = \"\";\r\n\r\n  const validateValue = (value) => {\r\n    if ( '' != value ) {\r\n      if (value < choices.min) value = choices.min;\r\n      if (value > choices.max) value = choices.max;\r\n    }\r\n\r\n    return value;\r\n  };\r\n\r\n  const getValueObject = (value) => {\r\n    value = \"string\" !== typeof value ? value.toString() : value;\r\n\r\n    const valueUnit = value.replace(/\\d+/g, \"\");\r\n    let valueNumber = value.replace(valueUnit, \"\");\r\n\r\n    valueNumber = '' != valueNumber ? parseFloat(valueNumber.trim()) : '';\r\n    valueNumber = validateValue(valueNumber);\r\n\r\n    return {\r\n      number: valueNumber,\r\n      unit: valueUnit,\r\n    };\r\n  };\r\n\r\n  const getValueForInput = (value) => {\r\n    const valueObject = getValueObject(value);\r\n    return valueObject.number + valueObject.unit;\r\n  };\r\n\r\n  const getValueForSlider = (value) => {\r\n    return getValueObject(value).number;\r\n  };\r\n\r\n  control.updateComponentState = (val) => {\r\n    if (\"slider\" === trigger) {\r\n      valueRef.current.value = getValueForInput(val);\r\n    } else if (\"input\" === trigger) {\r\n      sliderRef.current.value = getValueForSlider(val);\r\n    } else if (\"reset\" === trigger) {\r\n      valueRef.current.value = val;\r\n      sliderRef.current.value = val;\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    trigger = \"input\";\r\n    customizerSetting.set(getValueForInput(e.target.value));\r\n  };\r\n\r\n  const handleSliderChange = (e) => {\r\n    trigger = \"slider\";\r\n\r\n    let value = parseFloat(e.target.value);\r\n    value = validateValue(value);\r\n\r\n    const inputValueObj = getValueObject(valueRef.current.value); // We're going to use the unit.\r\n    const valueForInput = value + inputValueObj.unit;\r\n\r\n    customizerSetting.set(valueForInput);\r\n  };\r\n\r\n  const handleReset = (e) => {\r\n    if (\"\" !== props.default && \"undefined\" !== typeof props.default) {\r\n      sliderRef.current.value = props.default;\r\n      valueRef.current.value = props.default;\r\n    } else {\r\n      if (\"\" !== props.value) {\r\n        sliderRef.current.value = props.value;\r\n        valueRef.current.value = props.value;\r\n      } else {\r\n        sliderRef.current.value = choices.min;\r\n        valueRef.current.value = \"\";\r\n      }\r\n    }\r\n\r\n    trigger = \"reset\";\r\n    customizerSetting.set(sliderRef.current.value);\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n      e.preventDefault();\r\n      \r\n      const currentValue = getValueForSlider(valueRef.current.value);\r\n      const step = choices.step || 1;\r\n      let newValue = currentValue;\r\n\r\n      if (e.key === 'ArrowUp') {\r\n        newValue = currentValue + step;\r\n      } else if (e.key === 'ArrowDown') {\r\n        newValue = currentValue - step;\r\n      }\r\n\r\n      newValue = validateValue(newValue);\r\n      const inputValueObj = getValueObject(valueRef.current.value);\r\n      const valueForInput = newValue + inputValueObj.unit;\r\n\r\n      // Update both input and slider values\r\n      valueRef.current.value = valueForInput;\r\n      sliderRef.current.value = newValue;\r\n\r\n      trigger = 'input';\r\n      customizerSetting.set(valueForInput);\r\n    }\r\n  };\r\n\r\n  // Preparing for the template.\r\n  const fieldId = `kirki-control-input-${customizerSetting.id}`;\r\n  const sliderValue = getValueForSlider(props.value);\r\n  const inputValue = getValueForInput(props.value);\r\n\r\n  const sliderRef = useRef(null);\r\n  const valueRef = useRef(null);\r\n\r\n  return (\r\n    <div className=\"kirki-control-form\" tabIndex=\"1\">\r\n      <label className=\"kirki-control-label\" htmlFor={fieldId}>\r\n        <span className=\"customize-control-title\">{props.label}</span>\r\n        <span\r\n          className=\"customize-control-description description\"\r\n          dangerouslySetInnerHTML={{ __html: props.description }}\r\n        />\r\n      </label>\r\n\r\n      <div\r\n        className=\"customize-control-notifications-container\"\r\n        ref={props.setNotificationContainer}\r\n      ></div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"kirki-control-reset\"\r\n        onClick={handleReset}\r\n      >\r\n        <i className=\"dashicons dashicons-image-rotate\"></i>\r\n      </button>\r\n\r\n      <div className=\"kirki-control-cols\">\r\n        <div className=\"kirki-control-left-col\">\r\n          <input\r\n            ref={sliderRef}\r\n            type=\"range\"\r\n            id={fieldId}\r\n            defaultValue={sliderValue}\r\n            min={choices.min}\r\n            max={choices.max}\r\n            step={choices.step}\r\n            className=\"kirki-control-input-slider kirki-pro-control-input-slider\"\r\n            onChange={handleSliderChange}\r\n          />\r\n        </div>\r\n        <div className=\"kirki-control-right-col\">\r\n          <input\r\n            ref={valueRef}\r\n            type=\"text\"\r\n            defaultValue={inputValue}\r\n            className=\"kirki-control-input\"\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KirkiInputSliderForm;\r\n","module.exports=React;"],"names":["$5b55226219c5badd$exports","React","$5e62cac5aac90bdd$export$2e2bcd8739ae039","props","control","customizerSetting","choices","trigger","validateValue","value","min","max","getValueObject","valueUnit","toString","replace","valueNumber","number","parseFloat","trim","unit","getValueForInput","valueObject","getValueForSlider","updateComponentState","val","valueRef","current","sliderRef","fieldId","id","sliderValue","inputValue","useRef","createElement","className","tabIndex","htmlFor","label","dangerouslySetInnerHTML","__html","description","ref","setNotificationContainer","type","onClick","e","default","set","defaultValue","step","onChange","target","valueForInput","inputValueObj","onKeyDown","key","preventDefault","currentValue","newValue","$a8a3b6d68a8446d2$var$_extends","Object","assign","bind","n","arguments","length","t","r","hasOwnProperty","call","apply","$a8a3b6d68a8446d2$var$KirkiInputSliderControl","wp","customize","Control","extend","initialize","params","prototype","onRemoved","removedControl","destroy","container","remove","unbind","element","notifications","jQuery","render","renderContent","ReactDOM","setting","setNotificationCotainer","allowCollapse","addClass","ready","unmountComponentAtNode","controlConstructor","KirkiInputSliderControl","KirkiInputSliderForm","_extends","handleInputChange","handleSliderChange","handleReset","handleKeyDown","module","exports"],"version":3,"file":"control.js.map"}